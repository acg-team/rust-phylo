use super::{EvolutionaryModel, SubstitutionModel};
use crate::sequences::{charify, AMINOACIDS_STR};
use crate::substitution_models::{FreqVector, SubstMatrix};
use crate::{Result, Rounding};
use anyhow::bail;
use log::warn;
use ordered_float::OrderedFloat;
use std::collections::HashMap;

pub(crate) type ProteinSubstArray = [f64; 400];
pub(crate) type ProteinFrequencyArray = [f64; 20];

pub type ProteinSubstModel = SubstitutionModel<20>;

impl EvolutionaryModel<20> for ProteinSubstModel {
    fn new(model_name: &str, _: &[f64]) -> Result<Self>
    where
        Self: std::marker::Sized,
    {
        let (q, pi) = match model_name.to_uppercase().as_str() {
            "WAG" => wag()?,
            "BLOSUM" => blosum()?,
            "HIVB" => hivb()?,
            _ => bail!("Unknown protein model requested."),
        };
        Ok(ProteinSubstModel {
            index: aminoacid_index(),
            q,
            pi,
        })
    }

    fn get_p(&self, time: f64) -> SubstMatrix {
        self.get_p(time)
    }

    fn get_rate(&self, i: u8, j: u8) -> f64 {
        self.get_rate(i, j)
    }

    fn generate_scorings(
        &self,
        times: &[f64],
        zero_diag: bool,
        rounding: &Rounding,
    ) -> HashMap<OrderedFloat<f64>, (SubstMatrix, f64)> {
        self.generate_scorings(times, zero_diag, rounding)
    }

    fn normalise(&mut self) {
        self.normalise()
    }

    fn get_scoring_matrix(&self, time: f64, rounding: &Rounding) -> (SubstMatrix, f64) {
        self.get_scoring_matrix(time, rounding)
    }

    fn get_stationary_distribution(&self) -> &FreqVector {
        self.get_stationary_distribution()
    }

    fn get_char_probability(&self, char: u8) -> FreqVector {
        let mut vec = FreqVector::zeros(20);
        if AMINOACIDS_STR.contains(char as char) {
            vec[self.index[char as usize] as usize] = 1.0;
        } else {
            vec = FreqVector::from_column_slice(self.get_stationary_distribution().as_slice());
            match char {
                b'B' => {
                    vec[self.index[b'D' as usize] as usize] = self
                        .get_stationary_distribution()
                        .as_slice()[self.index[b'D' as usize] as usize];
                    vec[self.index[b'N' as usize] as usize] = self
                        .get_stationary_distribution()
                        .as_slice()[self.index[b'N' as usize] as usize];
                }
                b'Z' => {
                    vec[self.index[b'E' as usize] as usize] = self
                        .get_stationary_distribution()
                        .as_slice()[self.index[b'E' as usize] as usize];
                    vec[self.index[b'Q' as usize] as usize] = self
                        .get_stationary_distribution()
                        .as_slice()[self.index[b'Q' as usize] as usize];
                }
                b'J' => {
                    vec[self.index[b'I' as usize] as usize] = self
                        .get_stationary_distribution()
                        .as_slice()[self.index[b'I' as usize] as usize];
                    vec[self.index[b'L' as usize] as usize] = self
                        .get_stationary_distribution()
                        .as_slice()[self.index[b'L' as usize] as usize];
                }
                b'X' => {
                    vec =
                        FreqVector::from_column_slice(self.get_stationary_distribution().as_slice())
                }
                _ => warn!("Unknown character {} encountered.", char),
            };
        }
        vec.scale_mut(1.0 / vec.sum());
        vec
    }
}

pub fn aminoacid_index() -> [i32; 255] {
    let mut index = [-1_i32; 255];
    for (i, char) in charify(AMINOACIDS_STR).into_iter().enumerate() {
        index[char as usize] = i as i32;
        index[char.to_ascii_lowercase() as usize] = i as i32;
    }
    index
}

pub fn wag() -> Result<(SubstMatrix, FreqVector)> {
    Ok((
        SubstMatrix::from_row_slice(20, 20, &WAG_ARR),
        FreqVector::from_column_slice(&WAG_PI_ARR),
    ))
}

pub fn blosum() -> Result<(SubstMatrix, FreqVector)> {
    Ok((
        SubstMatrix::from_row_slice(20, 20, &BLOSUM_ARR),
        FreqVector::from_column_slice(&BLOSUM_PI_ARR),
    ))
}

pub fn hivb() -> Result<(SubstMatrix, FreqVector)> {
    Ok((
        SubstMatrix::from_row_slice(20, 20, &HIVB_ARR),
        FreqVector::from_column_slice(&HIVB_PI_ARR),
    ))
}

const WAG_ARR: ProteinSubstArray = [
    -1.11715057e+00,
    2.54545984e-02,
    2.09164670e-02,
    4.42435753e-02,
    2.08117574e-02,
    3.50234436e-02,
    9.64488758e-02,
    1.23784499e-01,
    8.12702170e-03,
    9.83413728e-03,
    3.60024059e-02,
    5.89977967e-02,
    1.82884104e-02,
    8.49024422e-03,
    6.90921971e-02,
    2.45933079e-01,
    1.35822601e-01,
    1.70810650e-03,
    8.91220187e-03,
    1.49259156e-01,
    5.01473302e-02,
    -9.74317971e-01,
    2.60650109e-02,
    8.81904364e-03,
    1.07031693e-02,
    1.17008471e-01,
    2.67594522e-02,
    5.10845220e-02,
    5.47986914e-02,
    9.51083433e-03,
    4.50280923e-02,
    3.48377118e-01,
    1.39832154e-02,
    4.14283292e-03,
    3.26352146e-02,
    8.93169898e-02,
    3.55011364e-02,
    1.75731159e-02,
    1.41246562e-02,
    1.87390737e-02,
    4.63539889e-02,
    2.93207534e-02,
    -1.45243780e+00,
    3.25057649e-01,
    5.37510081e-03,
    5.95022094e-02,
    5.77162600e-02,
    9.83446839e-02,
    1.01443284e-01,
    2.81916513e-02,
    1.19003416e-02,
    1.96081669e-01,
    4.05726158e-03,
    3.87868402e-03,
    9.36955608e-03,
    2.89960105e-01,
    1.29992329e-01,
    1.08581389e-03,
    4.02045869e-02,
    1.46018775e-02,
    6.71876816e-02,
    6.79797190e-03,
    2.22741453e-01,
    -9.89664514e-01,
    6.13890511e-04,
    2.37749418e-02,
    3.76214291e-01,
    7.56295399e-02,
    2.38634756e-02,
    2.00599411e-03,
    7.67292822e-03,
    3.12385315e-02,
    2.12367569e-03,
    1.88486374e-03,
    2.03635509e-02,
    7.81956861e-02,
    2.40040710e-02,
    1.95925023e-03,
    1.20580812e-02,
    1.13346362e-02,
    9.33756742e-02,
    2.43756285e-02,
    1.08821029e-02,
    1.81374603e-03,
    -4.87356833e-01,
    3.80910275e-03,
    1.30105594e-03,
    2.67953353e-02,
    6.38389434e-03,
    8.65405098e-03,
    3.47693768e-02,
    4.81960241e-03,
    7.99253166e-03,
    1.60540776e-02,
    5.25457073e-03,
    1.02702974e-01,
    3.28482827e-02,
    1.08264780e-02,
    2.01331318e-02,
    7.45652169e-02,
    8.26072508e-02,
    1.40086106e-01,
    6.33276882e-02,
    3.69266021e-02,
    2.00242850e-03,
    -1.37978519e+00,
    3.33274936e-01,
    2.88379648e-02,
    1.10105331e-01,
    5.79447806e-03,
    7.86693035e-02,
    2.53557754e-01,
    3.16289598e-02,
    4.03029062e-03,
    4.48289751e-02,
    7.50664287e-02,
    5.49363362e-02,
    3.25724389e-03,
    8.43000597e-03,
    2.24171105e-02,
    1.43908403e-01,
    2.02667745e-02,
    3.88587103e-02,
    3.69644996e-01,
    4.32673163e-04,
    2.10829953e-01,
    -1.23689359e+00,
    4.96037074e-02,
    1.46160186e-02,
    6.48004717e-03,
    1.39573505e-02,
    1.68246237e-01,
    6.45007592e-03,
    3.27252380e-03,
    3.27728658e-02,
    5.14323998e-02,
    5.26847179e-02,
    2.36373145e-03,
    7.26729376e-03,
    4.38051118e-02,
    1.28804316e-01,
    2.69818623e-02,
    4.61759948e-02,
    5.18222389e-02,
    6.21438786e-03,
    1.27224115e-02,
    3.45930861e-02,
    -4.97615305e-01,
    6.39512510e-03,
    1.54886836e-03,
    5.54661345e-03,
    2.43186032e-02,
    3.56354393e-03,
    2.01395947e-03,
    1.16984369e-02,
    9.78992830e-02,
    1.44609310e-02,
    5.08784222e-03,
    3.83550278e-03,
    1.39322980e-02,
    2.88165928e-02,
    9.86279100e-02,
    1.62306431e-01,
    5.57192762e-02,
    5.04512470e-03,
    1.65523718e-01,
    3.47337211e-02,
    2.17919503e-02,
    -9.92342352e-01,
    7.02914336e-03,
    4.51901377e-02,
    5.79670693e-02,
    8.27210918e-03,
    2.74023283e-02,
    3.34377320e-02,
    5.40027831e-02,
    3.03076161e-02,
    3.96432356e-03,
    1.43397841e-01,
    8.80654393e-03,
    1.75774906e-02,
    8.62894415e-03,
    2.27374806e-02,
    2.36108065e-03,
    3.44758564e-03,
    4.39112305e-03,
    7.76264619e-03,
    2.66054716e-03,
    3.54333162e-03,
    -1.23316235e+00,
    2.86901849e-01,
    2.10814436e-02,
    8.71432840e-02,
    4.27335650e-02,
    4.79948583e-03,
    2.33063652e-02,
    9.33714344e-02,
    3.20811429e-03,
    1.55550288e-02,
    5.81951554e-01,
    3.61773460e-02,
    2.29671528e-02,
    5.39592403e-03,
    5.07723042e-03,
    7.78712400e-03,
    3.35159212e-02,
    9.39981231e-03,
    5.35634973e-03,
    1.28067117e-02,
    1.61293890e-01,
    -7.26011058e-01,
    1.67668149e-02,
    9.93538973e-02,
    8.53150677e-02,
    1.99725943e-02,
    2.51521821e-02,
    2.09148274e-02,
    1.00449792e-02,
    1.47571566e-02,
    1.33956077e-01,
    8.23951408e-02,
    2.46964120e-01,
    1.23567432e-01,
    2.87287663e-02,
    1.50020989e-03,
    1.50135495e-01,
    1.57478831e-01,
    3.26392582e-02,
    2.28315787e-02,
    1.64719701e-02,
    2.33029658e-02,
    -1.12458038e+00,
    1.91231107e-02,
    3.58318686e-03,
    2.67471886e-02,
    7.05618738e-02,
    8.88135130e-02,
    2.07608023e-03,
    4.93353966e-03,
    2.27261186e-02,
    8.12342182e-02,
    3.15274268e-02,
    8.13199818e-03,
    6.21171899e-03,
    7.91265839e-03,
    5.95646550e-02,
    1.92016650e-02,
    1.52118141e-02,
    1.03625847e-02,
    2.16559061e-01,
    4.39180223e-01,
    6.08213111e-02,
    -1.32209849e+00,
    4.80238841e-02,
    8.22876997e-03,
    3.60353441e-02,
    9.70828298e-02,
    7.78624074e-03,
    1.58610797e-02,
    1.53161006e-01,
    1.91375401e-02,
    4.74003756e-03,
    3.94504125e-03,
    2.79773419e-03,
    8.06540709e-03,
    3.85161590e-03,
    4.94378712e-03,
    4.36267139e-03,
    1.74197608e-02,
    5.38907773e-02,
    1.91375567e-01,
    5.78321823e-03,
    2.43702603e-02,
    -7.13669467e-01,
    7.75400276e-03,
    3.98311647e-02,
    1.10075915e-02,
    2.30948356e-02,
    2.38942598e-01,
    4.83558564e-02,
    1.30789041e-01,
    3.13579206e-02,
    8.00317997e-03,
    2.53837873e-02,
    2.21694336e-03,
    3.59783992e-02,
    4.15784014e-02,
    2.12816861e-02,
    1.78512221e-02,
    5.08295724e-03,
    3.76245793e-02,
    3.62538959e-02,
    3.50682607e-03,
    6.51181975e-03,
    -6.05589533e-01,
    1.17705024e-01,
    5.09314101e-02,
    2.10476684e-03,
    7.99819538e-03,
    2.34294784e-02,
    3.06463029e-01,
    5.64954735e-02,
    1.63042418e-01,
    6.41659304e-02,
    2.85245740e-02,
    3.96595308e-02,
    4.29545276e-02,
    1.17240186e-01,
    1.89786831e-02,
    1.62485676e-02,
    3.11911675e-02,
    6.29601045e-02,
    1.01094323e-02,
    2.20200458e-02,
    7.74843139e-02,
    -1.39223882e+00,
    2.80340983e-01,
    7.90757000e-03,
    2.91351091e-02,
    1.73171753e-02,
    1.92845533e-01,
    2.55857546e-02,
    8.32830236e-02,
    2.24431082e-02,
    1.03950173e-02,
    3.30702829e-02,
    5.01340994e-02,
    1.97319334e-02,
    1.21360710e-02,
    7.41704586e-02,
    2.95519843e-02,
    9.02923141e-02,
    3.10325114e-02,
    6.93368196e-03,
    3.82015419e-02,
    3.19420652e-01,
    -1.15497297e+00,
    1.67384865e-03,
    1.07785314e-02,
    1.03292625e-01,
    1.02857436e-02,
    5.37140570e-02,
    2.95037596e-03,
    7.76910903e-03,
    1.45305800e-02,
    8.31594682e-03,
    9.53959418e-03,
    2.94435540e-02,
    6.73253520e-03,
    1.08081154e-02,
    6.01955812e-02,
    8.95156718e-03,
    1.05556633e-02,
    6.16978021e-02,
    6.69549041e-03,
    3.82122537e-02,
    7.09903625e-03,
    -4.66693769e-01,
    9.20111217e-02,
    2.71856415e-02,
    2.18869693e-02,
    1.76074690e-02,
    4.45530495e-02,
    1.95002140e-02,
    1.10201360e-02,
    8.77746631e-03,
    1.19614642e-02,
    9.05229631e-03,
    9.93189262e-02,
    2.13722785e-02,
    3.60660117e-02,
    8.67547834e-03,
    8.76940880e-03,
    2.60332425e-01,
    1.03764852e-02,
    5.74190655e-02,
    1.86432946e-02,
    3.75249558e-02,
    -7.26275191e-01,
    2.34177966e-02,
    1.82380955e-01,
    1.16226472e-02,
    8.05097399e-03,
    9.12024801e-03,
    2.03071882e-02,
    1.16133847e-02,
    3.58735465e-02,
    1.63605201e-02,
    3.03481904e-03,
    3.97836594e-01,
    1.62890495e-01,
    1.98837349e-02,
    4.21331247e-02,
    2.62132973e-02,
    1.51237250e-02,
    1.69806541e-02,
    8.88935552e-02,
    5.51642019e-03,
    1.16515558e-02,
    -1.08548744e+00,
];

pub(crate) const WAG_PI_ARR: ProteinFrequencyArray = [
    0.0866279, 0.0439720, 0.0390894, 0.0570451, 0.0193078, 0.0367281, 0.0580589, 0.0832518,
    0.0244313, 0.0484660, 0.0862090, 0.0620286, 0.0195027, 0.0384319, 0.0457631, 0.0695179,
    0.0610127, 0.0143859, 0.0352742, 0.0708956,
];

const BLOSUM_ARR: ProteinSubstArray = [
    -10.98, 0.444, 0.216, 0.218, 0.249, 0.38, 0.544, 1.292, 0.164, 0.375, 0.766, 0.505, 0.38,
    0.236, 0.502, 2.196, 0.759, 0.045, 0.21, 1.499, 0.624, -10.442, 0.53, 0.311, 0.084, 1.053,
    0.831, 0.452, 0.357, 0.25, 0.559, 2.675, 0.201, 0.135, 0.274, 0.733, 0.637, 0.118, 0.264,
    0.354, 0.434, 0.757, -11.567, 1.468, 0.124, 0.726, 0.735, 1.092, 0.656, 0.266, 0.336, 0.961,
    0.178, 0.211, 0.342, 1.57, 0.946, 0.051, 0.296, 0.418, 0.368, 0.374, 1.237, -8.885, 0.087,
    0.545, 1.914, 0.737, 0.23, 0.13, 0.276, 0.574, 0.043, 0.132, 0.31, 0.992, 0.496, 0.046, 0.166,
    0.228, 0.66, 0.158, 0.164, 0.136, -4.929, 0.11, 0.092, 0.284, 0.15, 0.297, 0.476, 0.168, 0.132,
    0.307, 0.112, 0.545, 0.366, 0.048, 0.184, 0.54, 0.846, 1.67, 0.807, 0.718, 0.092, -14.429,
    2.25, 0.673, 0.508, 0.211, 0.739, 1.782, 0.515, 0.183, 0.391, 1.155, 0.914, 0.135, 0.335,
    0.505, 0.769, 0.835, 0.518, 1.6, 0.049, 1.426, -10.73, 0.433, 0.312, 0.237, 0.398, 1.222, 0.13,
    0.117, 0.525, 0.799, 0.65, 0.072, 0.19, 0.448, 1.251, 0.311, 0.527, 0.422, 0.104, 0.293, 0.296,
    -6.188, 0.161, 0.109, 0.291, 0.325, 0.089, 0.189, 0.261, 0.886, 0.291, 0.055, 0.126, 0.201,
    0.412, 0.639, 0.823, 0.343, 0.142, 0.573, 0.555, 0.418, -7.793, 0.164, 0.337, 0.551, 0.112,
    0.24, 0.184, 0.614, 0.618, 0.093, 0.703, 0.272, 0.473, 0.224, 0.167, 0.097, 0.141, 0.12, 0.212,
    0.142, 0.082, -13.276, 3.432, 0.258, 0.804, 0.609, 0.143, 0.288, 0.59, 0.069, 0.239, 5.186,
    0.604, 0.314, 0.132, 0.129, 0.142, 0.261, 0.222, 0.237, 0.106, 2.145, -9.48, 0.257, 1.206,
    1.015, 0.184, 0.242, 0.418, 0.192, 0.271, 1.403, 0.734, 2.766, 0.697, 0.493, 0.092, 1.162,
    1.257, 0.488, 0.319, 0.298, 0.473, -11.821, 0.218, 0.133, 0.424, 0.846, 0.724, 0.077, 0.232,
    0.388, 1.309, 0.494, 0.306, 0.089, 0.172, 0.797, 0.317, 0.317, 0.154, 2.197, 5.271, 0.518,
    -16.524, 0.941, 0.195, 0.593, 0.852, 0.127, 0.366, 1.509, 0.396, 0.161, 0.177, 0.131, 0.194,
    0.138, 0.139, 0.327, 0.16, 0.81, 2.16, 0.153, 0.458, -9.263, 0.214, 0.447, 0.327, 0.354, 1.859,
    0.658, 0.903, 0.35, 0.307, 0.329, 0.076, 0.316, 0.667, 0.485, 0.131, 0.203, 0.419, 0.525,
    0.101, 0.229, -7.339, 0.94, 0.589, 0.087, 0.193, 0.489, 2.432, 0.578, 0.868, 0.65, 0.228,
    0.574, 0.626, 1.013, 0.271, 0.253, 0.34, 0.645, 0.191, 0.295, 0.579, -13.107, 2.75, 0.099,
    0.253, 0.462, 1.016, 0.608, 0.632, 0.393, 0.185, 0.549, 0.616, 0.402, 0.329, 0.626, 0.71,
    0.667, 0.331, 0.261, 0.439, 3.325, -12.88, 0.137, 0.238, 1.416, 0.215, 0.404, 0.123, 0.131,
    0.087, 0.292, 0.243, 0.272, 0.077, 0.263, 1.167, 0.256, 0.177, 1.012, 0.233, 0.43, 0.49,
    -7.698, 1.381, 0.445, 0.441, 0.394, 0.311, 0.207, 0.146, 0.316, 0.282, 0.274, 0.587, 0.398,
    0.722, 0.336, 0.223, 2.326, 0.226, 0.479, 0.373, 0.604, -9.08, 0.435, 1.585, 0.267, 0.221,
    0.143, 0.215, 0.24, 0.335, 0.22, 0.114, 4.345, 1.881, 0.282, 0.463, 0.415, 0.287, 0.441, 1.118,
    0.098, 0.219, -12.889,
];

pub(crate) const BLOSUM_PI_ARR: ProteinFrequencyArray = [
    0.0756, 0.0538, 0.0377, 0.0447, 0.0285, 0.0339, 0.0535, 0.078, 0.03, 0.0599, 0.0958, 0.052,
    0.0219, 0.045, 0.042, 0.0682, 0.0564, 0.0157, 0.036, 0.0715,
];

const HIVB_ARR: ProteinSubstArray = [
    -9.43243978e-01,
    3.44885537e-03,
    1.20377163e-04,
    5.99233536e-02,
    2.02260729e-03,
    2.29813907e-03,
    1.85288470e-02,
    8.58555378e-02,
    2.75696390e-03,
    2.87448194e-04,
    2.38256161e-03,
    1.26261101e-04,
    4.89166123e-04,
    4.35690888e-04,
    8.09094356e-02,
    7.16895862e-02,
    4.89244737e-01,
    1.77115646e-04,
    9.46480853e-05,
    1.22452647e-01,
    1.07057900e-02,
    -1.51232211e+00,
    7.11532558e-03,
    2.05916516e-04,
    5.74826241e-03,
    1.42672534e-01,
    9.37128004e-04,
    1.46892756e-01,
    2.94051256e-01,
    3.89370999e-02,
    7.76374661e-03,
    5.16407902e-01,
    6.58869758e-02,
    1.54206120e-04,
    4.89363746e-02,
    1.01128089e-01,
    8.81681205e-02,
    3.51162940e-02,
    1.87748864e-04,
    1.30658634e-03,
    1.74073924e-04,
    3.31467272e-03,
    -1.89004481e+00,
    7.27346556e-01,
    1.40656829e-03,
    2.80237796e-02,
    9.91431841e-04,
    1.30028505e-02,
    2.48690528e-01,
    3.91254360e-02,
    5.53425133e-05,
    1.99604407e-01,
    1.31043254e-04,
    1.54206120e-04,
    2.81970052e-04,
    3.82081110e-01,
    2.11659980e-01,
    1.77115646e-04,
    3.33950625e-02,
    4.28681076e-04,
    5.06569045e-02,
    5.60776726e-05,
    4.25201030e-01,
    -8.41517861e-01,
    8.17162241e-05,
    2.08494131e-04,
    1.32425564e-01,
    1.14108706e-01,
    6.23494933e-02,
    1.01637082e-03,
    9.69653961e-05,
    1.26261101e-04,
    1.31043254e-04,
    1.54206120e-04,
    1.30641114e-03,
    1.53542268e-02,
    8.44356942e-03,
    1.77115646e-04,
    1.27709229e-02,
    1.68527821e-02,
    4.30860814e-03,
    3.94473902e-03,
    2.07203285e-03,
    2.05916516e-04,
    -7.46298631e-01,
    2.08494131e-04,
    6.25404090e-05,
    3.61003285e-02,
    7.80866498e-03,
    2.87448194e-04,
    1.43643707e-03,
    1.26261101e-04,
    1.31043254e-04,
    2.86766327e-01,
    1.90629015e-04,
    1.36416969e-01,
    2.27427513e-02,
    9.32609517e-02,
    1.43473625e-01,
    6.75486294e-03,
    1.91874027e-03,
    3.83739514e-02,
    1.61799426e-02,
    2.05916516e-04,
    8.17162241e-05,
    -6.95829159e-01,
    3.20231910e-02,
    2.48933857e-03,
    2.29487053e-01,
    2.87448194e-04,
    1.65425413e-02,
    1.65335629e-01,
    7.95893827e-03,
    1.54206120e-04,
    1.70502785e-01,
    3.38084825e-03,
    7.48664344e-03,
    9.44238930e-04,
    2.13967140e-03,
    3.36359293e-04,
    5.15728815e-02,
    8.40288035e-04,
    1.90829824e-03,
    4.36015869e-01,
    8.17162241e-05,
    1.06757335e-01,
    -9.08421049e-01,
    1.57921422e-01,
    3.89468847e-03,
    3.50157317e-04,
    5.53425133e-05,
    1.16534451e-01,
    4.60719253e-03,
    1.54206120e-04,
    4.58371280e-04,
    1.45336565e-04,
    8.90612719e-03,
    1.77115646e-04,
    1.50042392e-03,
    1.65398269e-02,
    7.43420989e-02,
    4.09753946e-02,
    7.78601898e-03,
    1.16880686e-01,
    1.46741256e-02,
    2.58172862e-03,
    4.91286183e-02,
    -5.26572840e-01,
    1.62631054e-04,
    2.87448194e-04,
    5.53425133e-05,
    1.31742095e-02,
    1.31043254e-04,
    8.99209812e-03,
    1.90629015e-04,
    1.27326749e-01,
    1.13600192e-02,
    4.31007381e-02,
    9.46480853e-05,
    1.53286131e-02,
    2.95094642e-03,
    1.01393367e-01,
    1.84077146e-01,
    7.89442741e-02,
    3.92357181e-03,
    2.94203983e-01,
    1.49771772e-03,
    2.01032935e-04,
    -1.18008890e+00,
    5.92781414e-03,
    1.92781218e-02,
    1.26261101e-04,
    1.31043254e-04,
    4.48918689e-03,
    9.35294576e-02,
    1.11254269e-02,
    2.18706532e-02,
    2.46254155e-03,
    3.53875940e-01,
    8.04098657e-05,
    1.74073924e-04,
    7.59615816e-03,
    1.63848968e-02,
    7.28087855e-04,
    8.17162241e-05,
    2.08494131e-04,
    7.61840996e-05,
    2.01032935e-04,
    3.35381011e-03,
    -1.09133687e+00,
    6.59548829e-02,
    8.13927035e-03,
    2.93707246e-01,
    1.04809582e-01,
    1.56541879e-03,
    3.54048593e-02,
    2.64692765e-01,
    1.77115646e-04,
    2.80476350e-03,
    2.85276513e-01,
    7.49409132e-03,
    7.86687873e-03,
    1.20377163e-04,
    3.60785505e-04,
    2.12097728e-03,
    6.23213977e-02,
    6.25404090e-05,
    2.01032935e-04,
    5.66512265e-02,
    3.42568684e-01,
    -1.04300859e+00,
    2.05804332e-03,
    1.39419801e-01,
    2.62916500e-01,
    7.92090247e-02,
    2.69644673e-02,
    1.34517638e-03,
    2.65263623e-02,
    2.11985210e-03,
    2.26813716e-02,
    1.74073924e-04,
    2.29357681e-01,
    1.90302572e-01,
    2.05916516e-04,
    8.17162241e-05,
    2.73017644e-01,
    5.77225461e-02,
    2.09759775e-02,
    1.62631054e-04,
    1.85300029e-02,
    9.02077432e-04,
    -9.90072636e-01,
    3.36115464e-02,
    1.05679921e-03,
    1.19662408e-03,
    1.46531522e-02,
    1.43574857e-01,
    1.77115646e-04,
    9.46480853e-05,
    4.27505484e-03,
    6.49793588e-04,
    2.81951809e-02,
    1.20377163e-04,
    2.05916516e-04,
    8.17162241e-05,
    1.26629328e-02,
    2.19878319e-03,
    2.01032935e-04,
    1.62631054e-04,
    6.44257636e-01,
    5.88801174e-02,
    3.23849623e-02,
    -1.05143660e+00,
    5.79892115e-03,
    1.90629015e-04,
    1.45336565e-04,
    1.51837583e-01,
    3.15542150e-03,
    9.46480853e-05,
    1.10212978e-01,
    4.91824983e-04,
    5.60776726e-05,
    1.20377163e-04,
    2.05916516e-04,
    1.51961942e-01,
    2.08494131e-04,
    6.25404090e-05,
    1.17226727e-02,
    4.73445018e-03,
    1.95370489e-01,
    9.43572141e-02,
    8.65287525e-04,
    4.92788158e-03,
    -8.24901977e-01,
    1.90629015e-04,
    2.78020710e-02,
    4.34186532e-04,
    2.93779242e-02,
    2.90380326e-01,
    1.16316730e-02,
    7.38828919e-02,
    1.43956993e-02,
    1.78056603e-04,
    1.41117883e-03,
    8.17162241e-05,
    1.86481738e-01,
    1.50379664e-04,
    2.01032935e-04,
    7.97926496e-02,
    2.36048432e-03,
    2.29955891e-02,
    7.92571232e-04,
    1.31043254e-04,
    1.54206120e-04,
    -6.03458353e-01,
    1.56312964e-01,
    6.19049818e-02,
    1.57457934e-03,
    5.76181577e-04,
    8.04098657e-05,
    8.58647482e-02,
    3.90199662e-02,
    3.16464339e-01,
    2.17542563e-02,
    7.67011360e-02,
    4.85003218e-03,
    6.25404090e-05,
    1.76121336e-01,
    1.24493096e-02,
    7.00241047e-02,
    1.02677629e-02,
    1.27299220e-02,
    1.31043254e-04,
    2.94987672e-02,
    2.05026081e-01,
    -1.34981223e+00,
    2.74494072e-01,
    8.81072406e-04,
    1.22668462e-02,
    1.20489038e-03,
    5.54192189e-01,
    3.21737796e-02,
    1.65799560e-01,
    1.13140418e-02,
    1.20934945e-02,
    1.01573754e-02,
    3.62451690e-03,
    1.48609577e-02,
    2.31454564e-02,
    4.95110542e-01,
    4.84438476e-04,
    1.17963726e-01,
    1.29477550e-01,
    4.35690888e-04,
    7.67918488e-02,
    2.59602207e-01,
    -1.92081020e+00,
    1.77115646e-04,
    1.99995190e-03,
    1.14057535e-02,
    1.74073924e-04,
    1.11183856e-02,
    1.20377163e-04,
    2.05916516e-04,
    4.30280047e-02,
    1.11152391e-03,
    6.25404090e-05,
    4.89209627e-02,
    2.26115386e-03,
    2.87448194e-04,
    8.28857073e-03,
    1.26261101e-04,
    2.33461420e-03,
    2.55779533e-02,
    1.69471482e-03,
    7.22985464e-04,
    1.53673677e-04,
    -1.70503644e-01,
    2.42340743e-02,
    8.04098657e-05,
    1.74073924e-04,
    1.11238587e-04,
    4.24731560e-02,
    2.77844391e-02,
    1.23870682e-01,
    4.71334342e-03,
    9.91431841e-04,
    2.01032935e-04,
    6.08054741e-01,
    8.51812479e-03,
    1.23951734e-03,
    1.26261101e-04,
    1.31043254e-04,
    4.73104377e-01,
    1.16047701e-03,
    1.88363165e-02,
    3.24718625e-03,
    4.53493984e-02,
    -1.36074716e+00,
    6.60314560e-04,
    2.65089520e-01,
    9.11210589e-04,
    6.41754732e-04,
    4.31572190e-02,
    6.86460409e-03,
    8.72143460e-04,
    1.28641869e-02,
    3.83231095e-02,
    1.62631054e-04,
    1.01980295e+00,
    1.56105734e-02,
    6.71277243e-03,
    1.79613126e-01,
    2.23066555e-02,
    1.90629015e-04,
    2.17777541e-03,
    2.17978734e-02,
    1.77115646e-04,
    7.77236826e-04,
    -1.63805309e+00,
];

pub(crate) const HIVB_PI_ARR: ProteinFrequencyArray = [
    0.060490222,
    0.020075899,
    0.042109048,
    0.071567447,
    0.028809447,
    0.072308239,
    0.022293943,
    0.069730629,
    0.056968211,
    0.098851122,
    0.019768318,
    0.044127815,
    0.046025282,
    0.053606488,
    0.066039665,
    0.05060433,
    0.053636813,
    0.061625237,
    0.033011601,
    0.028350243,
];
